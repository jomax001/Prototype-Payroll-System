package hr.view;

import gui.HRDashboard;
import java.sql.*;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import javax.swing.JOptionPane;
import utils.DBConnection;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.io.File;
import javax.swing.JFileChooser;
import java.text.MessageFormat;
import javax.swing.JFrame;

/**
 *
 * @author Jomax
 */
public class EmployeeListForm extends javax.swing.JFrame {
    
    // Holds the most recently deleted employee info (for Undo)
    private Object[] lastDeletedEmployee = null;

    /**
     * Creates new form EmployeeList
     */
    public EmployeeListForm() {
        initComponents();
        setLocationRelativeTo(null); // This centers the window
        setTitle("Employee List - FinMark Payroll System");
        this.setResizable(true); // force resizable        
        this.setExtendedState(JFrame.MAXIMIZED_BOTH);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        loadEmployeeData(); // ‚Üê This automatically loads the data on open
        
    }
    
    // Loads employee data from the database into the JTable
    private void loadEmployeeData() {
    try {
        Connection con = DBConnection.getConnection();
        String query = "SELECT * FROM employees";
        PreparedStatement pst = con.prepareStatement(query);
        ResultSet rs = pst.executeQuery();

        ResultSetMetaData rsmd = rs.getMetaData();
        int columns = rsmd.getColumnCount();

        Vector<String> columnNames = new Vector<>();

        // Add column headers from the database
        for (int i = 1; i <= columns; i++) {
            columnNames.add(rsmd.getColumnName(i));
        }

        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make all columns editable except column 0 (usually ID)
                return column != 0;
            }
        };

        // Add each row from the result set
        while (rs.next()) {
            Vector<String> row = new Vector<>();
            for (int i = 1; i <= columns; i++) {
                row.add(rs.getString(i));
            }
            model.addRow(row);
        }

        EmployeeListTable.setModel(model); // Set the table model to show the data
        con.close();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to load employees: " + e.getMessage());
    }
}

    private void deleteSelectedEmployee() {
    int selectedRow = EmployeeListTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select an employee to delete.");
        return;
    }

    // Kunin ang Employee ID (assume column 0)
    String employeeId = EmployeeListTable.getValueAt(selectedRow, 0).toString();

    int confirm = JOptionPane.showConfirmDialog(this,
        "Are you sure you want to delete employee #" + employeeId + "?",
        "Confirm Delete",
        JOptionPane.YES_NO_OPTION);

    if (confirm != JOptionPane.YES_OPTION) {
        return;
    }

    try {
        Connection con = DBConnection.getConnection();
        String sql = "DELETE FROM employees WHERE id = ?";
        PreparedStatement pst = con.prepareStatement(sql);
        pst.setString(1, employeeId);
        pst.executeUpdate();
        con.close();

        JOptionPane.showMessageDialog(this, "Employee deleted successfully!");

        // Refresh the table
        loadEmployeeTable();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error deleting employee: " + e.getMessage());
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        ScrollPaneNewEmpList = new javax.swing.JScrollPane();
        EmployeeListTable = new javax.swing.JTable();
        SearchField = new javax.swing.JTextField();
        SearchButton = new javax.swing.JButton();
        CloseButton = new javax.swing.JButton();
        RefreshButton = new javax.swing.JButton();
        ExportButton = new javax.swing.JButton();
        PrintButton = new javax.swing.JButton();
        FooterLabel = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        UpdateButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        UndoButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Employee List");
        setBackground(new java.awt.Color(255, 255, 255));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        ScrollPaneNewEmpList.setMinimumSize(new java.awt.Dimension(1000, 500));
        ScrollPaneNewEmpList.setPreferredSize(new java.awt.Dimension(1000, 500));

        EmployeeListTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        EmployeeListTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        ScrollPaneNewEmpList.setViewportView(EmployeeListTable);

        getContentPane().add(ScrollPaneNewEmpList, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 70, 1520, 560));

        SearchField.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        SearchField.setToolTipText("Search by Name or ID");
        SearchField.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        SearchField.setMinimumSize(new java.awt.Dimension(200, 35));
        SearchField.setPreferredSize(new java.awt.Dimension(200, 35));
        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });
        getContentPane().add(SearchField, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 670, 200, 35));

        SearchButton.setBackground(new java.awt.Color(59, 115, 185));
        SearchButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        SearchButton.setForeground(new java.awt.Color(255, 255, 255));
        SearchButton.setText("Search");
        SearchButton.setToolTipText("Search");
        SearchButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        SearchButton.setMaximumSize(new java.awt.Dimension(125, 35));
        SearchButton.setMinimumSize(new java.awt.Dimension(125, 35));
        SearchButton.setPreferredSize(new java.awt.Dimension(125, 35));
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        getContentPane().add(SearchButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 670, 125, 35));

        CloseButton.setBackground(new java.awt.Color(255, 0, 0));
        CloseButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        CloseButton.setForeground(new java.awt.Color(255, 255, 255));
        CloseButton.setText("Close");
        CloseButton.setToolTipText("Close");
        CloseButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        CloseButton.setMaximumSize(new java.awt.Dimension(100, 35));
        CloseButton.setMinimumSize(new java.awt.Dimension(100, 35));
        CloseButton.setPreferredSize(new java.awt.Dimension(100, 35));
        CloseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CloseButtonActionPerformed(evt);
            }
        });
        getContentPane().add(CloseButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1240, 670, 100, 35));

        RefreshButton.setBackground(new java.awt.Color(255, 200, 0));
        RefreshButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        RefreshButton.setForeground(new java.awt.Color(255, 255, 255));
        RefreshButton.setText("Refresh");
        RefreshButton.setToolTipText("Refresh");
        RefreshButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        RefreshButton.setMaximumSize(new java.awt.Dimension(100, 35));
        RefreshButton.setMinimumSize(new java.awt.Dimension(100, 35));
        RefreshButton.setPreferredSize(new java.awt.Dimension(100, 35));
        RefreshButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshButtonActionPerformed(evt);
            }
        });
        getContentPane().add(RefreshButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 670, 100, 35));

        ExportButton.setBackground(new java.awt.Color(255, 0, 255));
        ExportButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        ExportButton.setForeground(new java.awt.Color(255, 255, 255));
        ExportButton.setText("Export");
        ExportButton.setToolTipText("Export");
        ExportButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        ExportButton.setMaximumSize(new java.awt.Dimension(100, 35));
        ExportButton.setMinimumSize(new java.awt.Dimension(100, 35));
        ExportButton.setPreferredSize(new java.awt.Dimension(100, 35));
        ExportButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExportButtonActionPerformed(evt);
            }
        });
        getContentPane().add(ExportButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 670, 100, 35));

        PrintButton.setBackground(new java.awt.Color(0, 128, 0));
        PrintButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        PrintButton.setForeground(new java.awt.Color(255, 255, 255));
        PrintButton.setText("Print");
        PrintButton.setToolTipText("Print");
        PrintButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        PrintButton.setMaximumSize(new java.awt.Dimension(100, 35));
        PrintButton.setMinimumSize(new java.awt.Dimension(100, 35));
        PrintButton.setPreferredSize(new java.awt.Dimension(100, 35));
        PrintButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrintButtonActionPerformed(evt);
            }
        });
        getContentPane().add(PrintButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 670, 100, 35));

        FooterLabel.setFont(new java.awt.Font("Segoe UI", 0, 10)); // NOI18N
        FooterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        FooterLabel.setText("¬© 2025 FinMark Payroll System");
        getContentPane().add(FooterLabel, new org.netbeans.lib.awtextra.AbsoluteConstraints(570, 740, 200, 20));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 28)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Employee List");
        jLabel1.setMaximumSize(new java.awt.Dimension(400, 40));
        jLabel1.setMinimumSize(new java.awt.Dimension(400, 40));
        jLabel1.setPreferredSize(new java.awt.Dimension(400, 40));
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(580, 20, 400, 40));

        UpdateButton.setBackground(new java.awt.Color(59, 115, 185));
        UpdateButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        UpdateButton.setForeground(new java.awt.Color(255, 255, 255));
        UpdateButton.setText("Update");
        UpdateButton.setToolTipText("Update");
        UpdateButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        UpdateButton.setMaximumSize(new java.awt.Dimension(100, 35));
        UpdateButton.setMinimumSize(new java.awt.Dimension(100, 35));
        UpdateButton.setPreferredSize(new java.awt.Dimension(100, 35));
        UpdateButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateButtonActionPerformed(evt);
            }
        });
        getContentPane().add(UpdateButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 670, 100, 35));

        DeleteButton.setBackground(new java.awt.Color(0, 204, 204));
        DeleteButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        DeleteButton.setForeground(new java.awt.Color(255, 255, 255));
        DeleteButton.setText("Delete");
        DeleteButton.setToolTipText("Delete");
        DeleteButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        DeleteButton.setMaximumSize(new java.awt.Dimension(100, 35));
        DeleteButton.setMinimumSize(new java.awt.Dimension(100, 35));
        DeleteButton.setPreferredSize(new java.awt.Dimension(100, 35));
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });
        getContentPane().add(DeleteButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1000, 670, 100, 35));

        UndoButton.setBackground(new java.awt.Color(0, 204, 0));
        UndoButton.setFont(new java.awt.Font("Segoe UI", 1, 13)); // NOI18N
        UndoButton.setForeground(new java.awt.Color(255, 255, 255));
        UndoButton.setText("Undo");
        UndoButton.setToolTipText("Undo");
        UndoButton.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        UndoButton.setMaximumSize(new java.awt.Dimension(100, 35));
        UndoButton.setMinimumSize(new java.awt.Dimension(100, 35));
        UndoButton.setPreferredSize(new java.awt.Dimension(100, 35));
        UndoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UndoButtonActionPerformed(evt);
            }
        });
        getContentPane().add(UndoButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 670, 100, 35));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void CloseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CloseButtonActionPerformed
   this.dispose(); // Close the form
   new HRDashboard().setVisible(true); // go back to HR Dashboard page
    }//GEN-LAST:event_CloseButtonActionPerformed

    private void ExportButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExportButtonActionPerformed
JFileChooser fileChooser = new JFileChooser();
    fileChooser.setDialogTitle("Save as");

    int userSelection = fileChooser.showSaveDialog(this);

    if (userSelection == JFileChooser.APPROVE_OPTION) {
        File fileToSave = fileChooser.getSelectedFile();

        try (PrintWriter pw = new PrintWriter(new FileWriter(fileToSave + ".csv"))) {
            DefaultTableModel model = (DefaultTableModel) EmployeeListTable.getModel();

            // Write column headers
            for (int i = 0; i < model.getColumnCount(); i++) {
                pw.print(model.getColumnName(i));
                if (i < model.getColumnCount() - 1) pw.print(",");
            }
            pw.println();

            // Write rows
            for (int row = 0; row < model.getRowCount(); row++) {
                for (int col = 0; col < model.getColumnCount(); col++) {
                    pw.print(model.getValueAt(row, col));
                    if (col < model.getColumnCount() - 1) pw.print(",");
                }
                pw.println();
            }

            pw.flush();
            javax.swing.JOptionPane.showMessageDialog(this, "Data exported successfully.");

        } catch (Exception e) {
            javax.swing.JOptionPane.showMessageDialog(this, "Error exporting data: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_ExportButtonActionPerformed

    private void PrintButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrintButtonActionPerformed
 try {
        // Set the header text that will appear at the top of each printed page
        MessageFormat header = new MessageFormat("Employee List");

        // Set the footer text to show the current page number
        MessageFormat footer = new MessageFormat("Page {0,number,integer}");

        // Start the print job for the table, scaling it to fit page width
        boolean complete = EmployeeListTable.print(javax.swing.JTable.PrintMode.FIT_WIDTH, header, footer);

        // Show a message box depending on whether the print was successful
        if (complete) {
            JOptionPane.showMessageDialog(this, "Printing Complete", "Print", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(this, "Printing Cancelled", "Print", JOptionPane.WARNING_MESSAGE);
        }

    } catch (Exception e) {
        // If something goes wrong during printing, show the error message
        JOptionPane.showMessageDialog(this, "Error Printing: " + e.getMessage(), "Print Error", JOptionPane.ERROR_MESSAGE);
    }
    }//GEN-LAST:event_PrintButtonActionPerformed

    private void RefreshButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshButtonActionPerformed
    loadEmployeeData(); // Calls the method to reload the data into the table
    }//GEN-LAST:event_RefreshButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
    String keyword = SearchField.getText(); // Get the text from the search field

    try {
        Connection con = DBConnection.getConnection();
        // This searches across multiple fields (edit as needed)
        String query = "SELECT * FROM employees WHERE " +
                       "CAST(id AS TEXT) ILIKE ? OR " +
                       "name ILIKE ? OR " +
                       "position ILIKE ? OR " +
                       "department ILIKE ?";

        PreparedStatement pst = con.prepareStatement(query);
        String searchTerm = "%" + keyword + "%";
        pst.setString(1, searchTerm);
        pst.setString(2, searchTerm);
        pst.setString(3, searchTerm);
        pst.setString(4, searchTerm);

        ResultSet rs = pst.executeQuery();
        ResultSetMetaData rsmd = rs.getMetaData();
        int columns = rsmd.getColumnCount();

         Vector<String> columnNames = new Vector<>();

        // Add column headers from the database
        for (int i = 1; i <= columns; i++) {
            columnNames.add(rsmd.getColumnName(i));
        }

        DefaultTableModel model = new DefaultTableModel(columnNames, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                // Make all columns editable except column 0 (usually ID)
                return column != 0;
            }
        };

        // Add each row from the result set
        while (rs.next()) {
            Vector<String> row = new Vector<>();
            for (int i = 1; i <= columns; i++) {
                row.add(rs.getString(i));
            }
            model.addRow(row);
        }

        EmployeeListTable.setModel(model); // Set the table model to show the data
        con.close();

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Failed to load employees: " + e.getMessage());
    }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void UpdateButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateButtonActionPerformed
int selectedRow = EmployeeListTable.getSelectedRow();

    if (selectedRow == -1) {
        JOptionPane.showMessageDialog(this, "Please select a row to update.");
        return;
    }

    DefaultTableModel model = (DefaultTableModel) EmployeeListTable.getModel();

    // Assuming these are the column names in your DB
    int employeeId = Integer.parseInt(model.getValueAt(selectedRow, 0).toString());
    String name = model.getValueAt(selectedRow, 1).toString();
    String position = model.getValueAt(selectedRow, 2).toString();
    String department = model.getValueAt(selectedRow, 3).toString();
    String email = model.getValueAt(selectedRow, 4).toString();
    String salary = model.getValueAt(selectedRow, 5).toString(); // adjust if needed

    try {
        Connection con = DBConnection.getConnection();
        String updateQuery = "UPDATE employees SET name=?, position=?, department=?, email=?, salary=? WHERE id=?";
        PreparedStatement pst = con.prepareStatement(updateQuery);
        pst.setString(1, name);
        pst.setString(2, position);
        pst.setString(3, department);
        pst.setString(4, email);
        pst.setString(5, salary);
        pst.setInt(6, employeeId);

        int rowsUpdated = pst.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(this, "Employee updated successfully.");
            loadEmployeeData(); // refresh table
        } else {
            JOptionPane.showMessageDialog(this, "Update failed.");
        }

        con.close();
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error updating employee: " + e.getMessage());
    }
    }//GEN-LAST:event_UpdateButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
    int selectedRow = EmployeeListTable.getSelectedRow(); // Get the selected row index

    if (selectedRow == -1) {
        // If no row is selected
        JOptionPane.showMessageDialog(this, "Please select an employee to delete.");
        return;
    }

    // Confirm deletion
    int confirm = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete this employee?", "Confirm Deletion", JOptionPane.YES_NO_OPTION);

    if (confirm == JOptionPane.YES_OPTION) {

        //  Step 1: Store selected employee info for undo (before deleting!)
        lastDeletedEmployee = new Object[EmployeeListTable.getColumnCount()];
        for (int i = 0; i < EmployeeListTable.getColumnCount(); i++) {
            lastDeletedEmployee[i] = EmployeeListTable.getValueAt(selectedRow, i);
        }

        // Step 2: Proceed with deletion
        String employeeId = EmployeeListTable.getValueAt(selectedRow, 0).toString();

        try {
            Connection con = DBConnection.getConnection(); // Open DB connection
            String sql = "DELETE FROM employees WHERE id = ?";
            PreparedStatement pst = con.prepareStatement(sql);
            pst.setString(1, employeeId);
            int rowsAffected = pst.executeUpdate(); // Execute delete

            if (rowsAffected > 0) {
                JOptionPane.showMessageDialog(this, "Employee deleted successfully.");
            } else {
                JOptionPane.showMessageDialog(this, "Employee not found or already deleted.");
            }

             con.close(); // Close DB connection

            // Reload the JTable to show updated data
            loadEmployeeData();

            // ‚úÖ Step 3: Reload table to reflect deletion
            loadEmployeeData();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error deleting employee: " + e.getMessage());
        }
    }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void UndoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UndoButtonActionPerformed
// Check if there's a deleted employee to undo
    if (lastDeletedEmployee == null) {
        JOptionPane.showMessageDialog(this, "No recent deletion to undo.");
        return;
    }

    try {
        // Connect to the database
        Connection con = DBConnection.getConnection();

        // Restore only basic columns (this can be expanded later)
        String sql = "INSERT INTO employees (id, last_name, first_name, position, department) VALUES (?, ?, ?, ?, ?)";
        PreparedStatement pst = con.prepareStatement(sql);

        // Set the values from the last deleted employee
        pst.setString(1, lastDeletedEmployee[0].toString());  // id
        pst.setString(2, lastDeletedEmployee[1].toString());  // last_name
        pst.setString(3, lastDeletedEmployee[2].toString());  // position
        pst.setString(4, lastDeletedEmployee[3].toString());  // department
        pst.setString(5, lastDeletedEmployee[4].toString());  // email
        pst.setString(6, lastDeletedEmployee[5].toString());  // birthday
        pst.setString(7, lastDeletedEmployee[6].toString());  // address
        pst.setString(8, lastDeletedEmployee[7].toString());  // phone_number
        pst.setString(9, lastDeletedEmployee[8].toString());  // philhealth
        pst.setString(10, lastDeletedEmployee[9].toString()); // sss
        pst.setString(11, lastDeletedEmployee[10].toString()); // tin
        pst.setString(12, lastDeletedEmployee[11].toString()); // pagibig
        pst.setString(13, lastDeletedEmployee[12].toString()); // status
        pst.setString(14, lastDeletedEmployee[13].toString()); // supervisor
        pst.setString(15, lastDeletedEmployee[14].toString()); // basic_salary
        pst.setString(16, lastDeletedEmployee[15].toString()); // phone_allowance
        pst.setString(17, lastDeletedEmployee[16].toString()); // rice_subsidy
        pst.setString(18, lastDeletedEmployee[17].toString()); // clothing_allowance
        pst.setString(19, lastDeletedEmployee[18].toString()); // gross_semi_monthly
        pst.setString(20, lastDeletedEmployee[19].toString()); // hourly_rate
        pst.setString(21, lastDeletedEmployee[20].toString()); // first_name

        // Insert back into the database
        pst.executeUpdate();
        con.close();

        // Let the user know it worked
        JOptionPane.showMessageDialog(this, "Undo successful. Employee restored.");

        // Refresh the table so the restored employee shows again
        loadEmployeeData();

        // Clear undo buffer so you can‚Äôt undo twice
        lastDeletedEmployee = null;

    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Undo failed: " + e.getMessage());
    }
    }//GEN-LAST:event_UndoButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(EmployeeListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(EmployeeListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(EmployeeListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(EmployeeListForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new EmployeeListForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CloseButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JTable EmployeeListTable;
    private javax.swing.JButton ExportButton;
    private javax.swing.JLabel FooterLabel;
    private javax.swing.JButton PrintButton;
    private javax.swing.JButton RefreshButton;
    private javax.swing.JScrollPane ScrollPaneNewEmpList;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JButton UndoButton;
    private javax.swing.JButton UpdateButton;
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    private void loadEmployeeTable() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
